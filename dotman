#!/usr/bin/env python3

import git
import os
import subprocess
import sys
from shutil import which


def check_dependencies(dependencies):
    """
    Check if the required programs are installed
    """
    missing_deps = [cmd for cmd in dependencies if which(cmd) is None]
    if missing_deps:
        print("The following dependencies are missing:")
        print("\n".join(missing_deps))
        sys.exit(1)


def link_files(files, HOME_DIR,
               CONFIG_DIR, LOCAL_BIN_DIR, OMZ_PLUGIN_DIR, REPO_DIR):
    """
    Create symbolic links of the dotfiles to their correct path in the system
    """
    if len(files) == 0:
        print("No files added, please add at least one file")
        return

    link_commands = {}

    for file in files:
        if file == ".config":
            repo_config_dir = os.path.join(REPO_DIR, ".config")
            if os.path.exists(repo_config_dir):
                for config_file in os.listdir(repo_config_dir):
                    config_file_path = os.path.join(
                        repo_config_dir, config_file
                    )
                    link_commands[config_file_path] = CONFIG_DIR
        elif file == ".local/bin":
            repo_local_bin_dir = os.path.join(REPO_DIR, ".local/bin")
            if os.path.exists(repo_local_bin_dir):
                for local_bin_file in os.listdir(repo_local_bin_dir):
                    local_bin_file_path = os.path.join(
                        repo_local_bin_dir, local_bin_file
                    )
                    link_commands[local_bin_file_path] = LOCAL_BIN_DIR
        elif file == ".oh-my-zsh":
            repo_omz_plugin_dir = os.path.join(
                REPO_DIR, ".oh-my-zsh/custom/plugins")
            if os.path.exists(repo_omz_plugin_dir):
                for omz_plugin_file in os.listdir(repo_omz_plugin_dir):
                    omz_plugin_file_path = os.path.join(
                        repo_omz_plugin_dir, omz_plugin_file
                    )
                    link_commands[omz_plugin_file_path] = OMZ_PLUGIN_DIR
        else:
            file_path = os.path.join(REPO_DIR, file)
            link_commands[file_path] = HOME_DIR

    for source, target in link_commands.items():
        target_full = os.path.join(target, os.path.basename(source))

        os.makedirs(os.path.dirname(target), exist_ok=True)
        if os.path.lexists(target_full):
            print(f"Skipping {target_full}, symlink already exists")
            continue
        else:
            print(f"Creating symbolic link: {source} -> {target_full}")
            os.symlink(source, target_full)

    print("Done linking files")


def edit_file(REPO_DIR):
    """
    Display a fuzzy picker list of the files under REPO_DIR and edit
    the selected one with the user's default editor
    """
    if os.getenv("EDITOR") is None:
        print("No default editor found, setting it to vi")
        os.putenv("EDITOR", "vi")
    EDITOR = os.getenv("EDITOR")

    os.chdir(REPO_DIR)

    files = (
        subprocess.run(
            ["fd", "--type", "f", "--hidden"], capture_output=True, text=True
        )
        .stdout.strip()
        .split("\n")
    )

    while files:
        file = subprocess.run(
            ["sk", "--preview", "bat {} --color=always"],
            input="\n".join(files),
            capture_output=True,
            text=True,
        ).stdout.strip()

        if file:
            subprocess.run([EDITOR, file])
        else:
            break


def git_ui(REPO_DIR):
    """
    Open gitui in REPO_DIR
    """
    os.chdir(REPO_DIR)
    subprocess.run(["gitui"])


def update_dotfiles(REPO_DIR):
    """
    Update the local dotfiles by pulling remote changes
    """
    repository = git.Repo(REPO_DIR)

    before = repository.head.commit
    repository.remotes.origin.pull("i3wm")
    after = repository.head.commit

    if before != after:
        link_files()
    else:
        print("No updates available")


def main():
    # Directory of the dotfiles repository
    REPO_DIR = os.path.expanduser("~/dotfiles")
    if not os.path.exists(REPO_DIR):
        print("The dotfiles directory pointed to by REPO_DIR doesn't exist")
        while input(f"Create {REPO_DIR}? <y/n> ").lower() != "y":
            print("Please, create it and put dotman in it")
            sys.exit(1)
        os.makedirs(REPO_DIR)

    HOME_DIR = os.path.expanduser("~")
    # check if .config and .local/bin exist
    # if don't, create them
    CONFIG_DIR = os.path.expanduser("~/.config")
    LOCAL_BIN_DIR = os.path.expanduser("~/.local/bin")
    OMZ_PLUGIN_DIR = os.path.expanduser("~/.oh-my-zsh/custom/plugins")
    for dir in [CONFIG_DIR, LOCAL_BIN_DIR]:
        os.makedirs(dir, exist_ok=True)

    dependencies = ["bat", "fd", "gitui", "sk"]
    check_dependencies(dependencies)

    # List of files/dirs to link and edit
    files = [
        ".config",
        ".icons",
        ".local/bin",
        ".oh-my-zsh",
        ".themes",
        ".tmux.conf",
        ".xinitrc",
        ".xprofile",
        ".zshrc",
    ]

    print("dotman - Dotfiles Manager\n"
          "by sirkhancision")

    while True:
        choice = input(
            "\nOptions:\n"
            "[1] Link dotfiles\n"
            "[2] Edit file\n"
            "[3] Open gitui\n"
            "[4] Update dotfiles\n"
            "Ctrl-C to exit\n"
        )

        match choice:
            case "1":
                link_files(
                    files, HOME_DIR, CONFIG_DIR,
                    LOCAL_BIN_DIR, OMZ_PLUGIN_DIR, REPO_DIR
                )
            case "2":
                edit_file(REPO_DIR)
            case "3":
                git_ui(REPO_DIR)
            case "4":
                update_dotfiles(REPO_DIR)
            case _:
                print("Invalid option")


if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\nExiting dotman")
        sys.exit(0)
