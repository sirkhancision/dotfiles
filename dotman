#!/usr/bin/env python3

import git
import os
import subprocess
import sys
from shutil import which


def check_dependencies(dependencies):
    """
    Check if the required programs are installed
    """
    missing_deps = [cmd for cmd in dependencies if which(cmd) is None]
    if missing_deps:
        print("The following dependencies are missing:")
        print("\n".join(missing_deps))
        sys.exit(1)


def get_link_commands(REPO_DIR, TARGET_DIR, file, target):
    link_commands = {}

    repo_target_dir = os.path.join(REPO_DIR, target)
    if os.path.isdir(repo_target_dir):
        for target_file in os.listdir(repo_target_dir):
            target_file_path = os.path.join(repo_target_dir, target_file)
            link_commands[target_file_path] = TARGET_DIR
    elif os.path.exists(repo_target_dir):
        link_commands[repo_target_dir] = TARGET_DIR

    return link_commands


def link_files(files, HOME_DIR, REPO_DIR):
    """
    Create symbolic links of the dotfiles to their correct path in the system
    """
    if not files:
        print("No files added, please add at least one file")
        return

    link_commands = {}

    for file in files:
        target_dir = os.path.expanduser(file)
        target_file = target_dir.replace(HOME_DIR + "/", "")

        link_commands.update(
            get_link_commands(REPO_DIR, target_dir, file, target_file))

    for source, target in link_commands.items():
        source_basename = os.path.basename(source)
        if source_basename in target:
            target_full = target
        else:
            target_full = os.path.join(target, source_basename)

        os.makedirs(os.path.dirname(target), exist_ok=True)
        if os.path.lexists(target_full):
            print(f"Skipping {target_full}, symlink already exists")
            continue
        else:
            print(f"Creating symbolic link: {source} -> {target_full}")
            os.symlink(source, target_full)

    print("\nDone linking files")


def edit_file(REPO_DIR):
    """
    Display a fuzzy picker list of the files under REPO_DIR and edit
    the selected one with the user's default editor
    """
    if os.getenv("EDITOR") is None:
        print("No default editor found, setting it to vi")
        os.putenv("EDITOR", "vi")
    EDITOR = os.getenv("EDITOR")

    os.chdir(REPO_DIR)

    files = (subprocess.run(["fd", "--type", "f", "--hidden"],
                            capture_output=True,
                            text=True).stdout.strip().split("\n"))

    while files:
        file = subprocess.run(
            ["sk", "--preview", "bat {} --color=always"],
            input="\n".join(files),
            capture_output=True,
            text=True,
        ).stdout.strip()

        if file:
            subprocess.run([EDITOR, file])
        else:
            break


def git_ui(REPO_DIR):
    """
    Open gitui in REPO_DIR
    """
    os.chdir(REPO_DIR)
    subprocess.run(["gitui"])


def update_dotfiles(REPO_DIR):
    """
    Update the local dotfiles by pulling remote changes
    """
    repository = git.Repo(REPO_DIR)

    before = repository.head.commit
    repository.remotes.origin.pull("swaywm")
    after = repository.head.commit

    if before != after:
        link_files()
    else:
        print("No updates available")


def main():
    # Directory of the dotfiles repository
    REPO_DIR = os.path.expanduser("~/dotfiles")
    if not os.path.exists(REPO_DIR):
        print("The dotfiles directory pointed to by REPO_DIR doesn't exist")
        print("Please, create it and put dotman in it")
        sys.exit(1)

    HOME_DIR = os.path.expanduser("~")
    dependencies = ["bat", "fd", "gitui", "sk"]
    check_dependencies(dependencies)

    # List of files/dirs to link and edit
    with open(os.path.join(REPO_DIR, "dotman_files"), "r") as dotman_files:
        files = []

        for file in dotman_files:
            files.append(str(file.strip()))

    print("dotman - Dotfiles Manager\n"
          "by sirkhancision")

    while True:
        choice = input("\nOptions:\n"
                       "[1] Link dotfiles\n"
                       "[2] Edit file\n"
                       "[3] Open gitui\n"
                       "[4] Update dotfiles\n"
                       "Ctrl-C to exit\n")

        match choice:
            case "1":
                link_files(files, HOME_DIR, REPO_DIR)
            case "2":
                edit_file(REPO_DIR)
            case "3":
                git_ui(REPO_DIR)
            case "4":
                update_dotfiles(REPO_DIR)
            case _:
                print("Invalid option")


if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\nExiting dotman")
        sys.exit(0)
