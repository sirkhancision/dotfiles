#!/usr/bin/env python3

import git
import os
import subprocess
import sys


def get_updates(XBPS_SRC):
    """
    Get a list of the packages with available updates
    """
    updates = subprocess.run([XBPS_SRC, "show-sys-updates"],
                             capture_output=True,
                             text=True)
    if updates.returncode != 0:
        raise subprocess.CalledProcessError("Error running xbps-src")

    return sorted(updates.stdout.strip().split())


def select_packages(num_updates, updates):
    """
    Select packages to update
    """
    selected_indexes_input = input(f"Select packages from 1-{num_updates}: ")
    selected_indexes = [
        int(index) - 1 for index in selected_indexes_input.split()
        if index.isdigit()
    ]

    valid_indexes = set(range(num_updates))
    invalid_selections = set(selected_indexes) - valid_indexes

    packages = [updates[index] for index in selected_indexes]

    for invalid_sel_index in invalid_selections:
        print(f"{invalid_sel_index}: Value out of range, ignoring...")

    return packages


def update_all(XBPS_SRC):
    """
    Update all packages that have updates available
    """
    print("\nUpdating packages...")
    result = subprocess.run([XBPS_SRC, "update-sys"])
    if result.returncode != 0:
        raise subprocess.CalledProcessError("Error running xbps-src")


def update_packages(XBPS_SRC, updates):
    """
    Update packages that have updates available
    """
    num_updates = len(updates)

    if num_updates <= 1:
        update_all(XBPS_SRC)
        return

    while True:
        method_option = input(
            "Do you want to update ['a']ll packages or ['s']elect which ones "
            "to update? ").lower()

        if method_option == "a":
            update_all(XBPS_SRC)
            break
        elif method_option == "s":
            packages = select_packages(num_updates, updates)
            update_selected_packages(XBPS_SRC, packages)
            break
        else:
            print("Invalid option")


def update_selected_packages(XBPS_SRC, packages):
    """
    Updates selected packages with xbps-install
    """
    for pkg in packages:
        print(f"\nUpdating package: {pkg}")
        result = subprocess.run([XBPS_SRC, "pkg", pkg])
        if result.returncode != 0:
            raise subprocess.CalledProcessError("Error running xbps-src")

    xbps_install_cmd = "xi " + " ".join(packages)
    result = subprocess.run(xbps_install_cmd, shell=True)
    if result.returncode != 0:
        raise subprocess.CalledProcessError("Error running xbps-install")


def pull_changes(VOID_PKGS_DIR):
    """
    Pull changes from the remote repository
    """
    repository = git.Repo(VOID_PKGS_DIR)

    if repository.is_dirty():
        print("Failed to update repository")
        sys.exit(1)

    print("Pulling changes...")

    try:
        repository.remote("upstream").fetch()
    except git.exc.GitCommandError as e:
        raise git.exc.GitCommandError("Failed to fetch from upstream: " +
                                      str(e))

    repository.git.rebase("upstream/master")


def print_updates(updates):
    """
    Prints the list of updates available
    """
    print("The following packages have updates available:")
    for index, pkg in enumerate(updates):
        print(f"[{index + 1}] {pkg}")

    print("\nNOTE: the packages will be built before being installed")


def main():
    """
    Tool to update all packages from void-packages, including packages not in
    the package manager's repository

    xuu stands for xbps-updateÂ²
    """
    VOID_PKGS_DIR = os.path.expanduser("~/Github/void-packages")
    XBPS_SRC = os.path.join(VOID_PKGS_DIR, "./xbps-src")

    # enter void-packages if not in it already
    if os.getcwd() != VOID_PKGS_DIR:
        os.chdir(VOID_PKGS_DIR)

    # pull changes and update packages
    try:
        pull_changes(VOID_PKGS_DIR)
    except git.exc.GitCommandError as e:
        print(e)
        sys.exit(1)

    updates = get_updates(XBPS_SRC)

    if not updates:
        print("No updates available")
        return

    print_updates(updates)

    update_option = input("Do you want to update any of them? <y/n> ").lower()

    if update_option == "y":
        update_packages(XBPS_SRC, updates)
    else:
        print("\nUpdates cancelled")


if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\nScript aborted")
        sys.exit(1)
